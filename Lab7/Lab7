::::::::::::::
Driver.java
::::::::::::::
/*
 * Purpose: Lab 7 part 1
 * Status: Complete
 * Last update: 10/25/17
 * Submitted:  10/31/17
 * Comment: 
 * @author: Nicholas La Sala
 * @version: 2017.09.07
 */
import java.io.*;
import java.math.*;
public class Driver {
	//The result will equal 1 for both n=1 and n=0
	//with int it break at n = 13
	//This can be improved by changing from int to long
	// with long it hits sign bit at n = 21
	// with long it overflows at 65
	// It fail because it hits the limit of what can be stored with int and long
	// There exist a class BigInterger, but that requires importing math library
	// This could be improved using scientific notation
	// This also requires the math library
	public static void main(String args[]) throws IOException{
		System.out.println("This program finds the factorial of n");
		System.out.println("Please enter n: ");
		BufferedReader reader = new BufferedReader (new InputStreamReader (System.in));
		int n = Integer.parseInt(reader.readLine());
		long m = n;
		System.out.println(n+ "!");
		System.out.println("The integer method");
		System.out.println(rFactorial(n));
		System.out.println("The long method");
		System.out.println(rFactorial(m));
		System.out.println("The BigInteger method");
		System.out.println(rBigFactorial(n));
	}
	public static long rFactorial(long n){
		long result = 0;
		if(n == 0||n == 1){
			result = 1;
		}
		else{
			result = n*rFactorial(n -1);
			System.out.println(result);
		}
		return result;
	}
	public static int rFactorial(int n){
		int result = 0;
		if(n == 0||n == 1){
			result = 1;
		}
		else{
			result = n*rFactorial(n -1);
			System.out.println(result);
		}
		return result;
	}
	public static BigInteger rBigFactorial(int n){
		BigInteger result = BigInteger.valueOf(n);
		if(n == 0||n == 1){
			result = BigInteger.ONE;
		}
		else{
			result = result.multiply(rBigFactorial(n - 1));
			
			System.out.println(result);
		}
		return result;
	}
}::::::::::::::
Driver2.java
::::::::::::::
/*
 * Purpose: Lab 7 part 2
 * Status: Complete
 * Last update: 10/25/17
 * Submitted:  10/31/17
 * Comment: 
 * @author: Nicholas La Sala
 * @version: 2017.09.07
 */
import java.io.*;
public class Driver2 {
	static int calls;
	static int moves;
	public static void main(String args[]) throws IOException{
		System.out.println("This program will solve the tower of hanoi problem for n disks");
		System.out.println("Please enter n: ");
		BufferedReader reader = new BufferedReader (new InputStreamReader (System.in));
		int n = Integer.parseInt(reader.readLine());
		System.out.println(n);
		String i = "Inital";
		String t = "Temporary";
		String d = "Destination";
		tHanoi(n, i, t, d);
		System.out.println("There are "+ calls +" calls for "+ n + " disks");
		System.out.println("There are "+ moves +" moves for "+ n + " disks");
	}
	public static void tHanoi(int n,String i, String t, String d){
		calls++;
		
		if(n > 0){
			tHanoi(n-1, i, d,t);
			System.out.println("move disk "+n+ " from peg " + i +" to "+ d);
			moves++;
			tHanoi(n-1, t, i, d);
		}
		
	}
}
::::::::::::::
P2.output
::::::::::::::
This program will solve the tower of hanoi problem for n disks
Please enter n: 
1
move disk 1 from peg Inital to Destination
There are 3 calls for 1 disks
There are 1 moves for 1 disks
This program will solve the tower of hanoi problem for n disks
Please enter n: 
2
move disk 1 from peg Inital to Temporary
move disk 2 from peg Inital to Destination
move disk 1 from peg Temporary to Destination
There are 7 calls for 2 disks
There are 3 moves for 2 disks
This program will solve the tower of hanoi problem for n disks
Please enter n: 
3
move disk 1 from peg Inital to Destination
move disk 2 from peg Inital to Temporary
move disk 1 from peg Destination to Temporary
move disk 3 from peg Inital to Destination
move disk 1 from peg Temporary to Inital
move disk 2 from peg Temporary to Destination
move disk 1 from peg Inital to Destination
There are 15 calls for 3 disks
There are 7 moves for 3 disks
This program will solve the tower of hanoi problem for n disks
Please enter n: 
4
move disk 1 from peg Inital to Temporary
move disk 2 from peg Inital to Destination
move disk 1 from peg Temporary to Destination
move disk 3 from peg Inital to Temporary
move disk 1 from peg Destination to Inital
move disk 2 from peg Destination to Temporary
move disk 1 from peg Inital to Temporary
move disk 4 from peg Inital to Destination
move disk 1 from peg Temporary to Destination
move disk 2 from peg Temporary to Inital
move disk 1 from peg Destination to Inital
move disk 3 from peg Temporary to Destination
move disk 1 from peg Inital to Temporary
move disk 2 from peg Inital to Destination
move disk 1 from peg Temporary to Destination
There are 31 calls for 4 disks
There are 15 moves for 4 disks
This program will solve the tower of hanoi problem for n disks
Please enter n: 
5
move disk 1 from peg Inital to Destination
move disk 2 from peg Inital to Temporary
move disk 1 from peg Destination to Temporary
move disk 3 from peg Inital to Destination
move disk 1 from peg Temporary to Inital
move disk 2 from peg Temporary to Destination
move disk 1 from peg Inital to Destination
move disk 4 from peg Inital to Temporary
move disk 1 from peg Destination to Temporary
move disk 2 from peg Destination to Inital
move disk 1 from peg Temporary to Inital
move disk 3 from peg Destination to Temporary
move disk 1 from peg Inital to Destination
move disk 2 from peg Inital to Temporary
move disk 1 from peg Destination to Temporary
move disk 5 from peg Inital to Destination
move disk 1 from peg Temporary to Inital
move disk 2 from peg Temporary to Destination
move disk 1 from peg Inital to Destination
move disk 3 from peg Temporary to Inital
move disk 1 from peg Destination to Temporary
move disk 2 from peg Destination to Inital
move disk 1 from peg Temporary to Inital
move disk 4 from peg Temporary to Destination
move disk 1 from peg Inital to Destination
move disk 2 from peg Inital to Temporary
move disk 1 from peg Destination to Temporary
move disk 3 from peg Inital to Destination
move disk 1 from peg Temporary to Inital
move disk 2 from peg Temporary to Destination
move disk 1 from peg Inital to Destination
There are 63 calls for 5 disks
There are 31 moves for 5 disks
::::::::::::::
Driver3.java
::::::::::::::
/*
 * Purpose: Lab 7 part 3
 * Status: Complete
 * Last update: 10/25/17
 * Submitted:  10/31/17
 * Comment: Part D possibly inefficient
 * @author: Nicholas La Sala
 * @version: 2017.09.07
 */
import java.io.*;


public class Driver3 {
	public static void main(String args[]) throws IOException{
		BufferedReader reader = new BufferedReader (new InputStreamReader (System.in));
		System.out.println("This Program will calculate the Binomial Coefficent for any n and k");
		System.out.println("Please enter n: ");
		int n = Integer.parseInt(reader.readLine());
		System.out.println(n);
		System.out.println("Please enter k: ");
		int k = Integer.parseInt(reader.readLine());
		System.out.println(k);
		System.out.println("Here is the Binomial Coefficient found recursively");
		System.out.println("The Binomial Coefficient is "+rBinomialCoefficient(n,k));
		System.out.println("Here is pascal's triangle for " + n + " rows");
		pascalTriangle(n);
		System.out.println("Here is the Binomial Coefficient found iteratively");
		System.out.println("The Binomial Coefficient is "+iBinomialCoefficient(n,k));
		System.out.println("Here is the Binomial Coefficient found through the reduced formula");
		System.out.println("The Binomial Coefficient is "+fBinomialCoefficient(n,k));
	}
	//Part a
	public static int rBinomialCoefficient(int n, int k){
		int result = 0;
		if(k == 0 || k == n){
			result = 1;
		}
		else{
			result = rBinomialCoefficient(n-1,k) +rBinomialCoefficient(n-1,k-1);
		}
		return result;
	}
	//Part c
	public static void pascalTriangle(int n){
		int[] last;
		int[] curr= new int[1];
		curr[0] = 1;
		last = curr;
		System.out.println(curr[0]);
		for(int i = 2; i <= n +1; i++){
			curr = new int[i];
			curr[0] = 1;
			curr[i-1] = 1;
			for(int p =0; p < i -2; p++){
				curr[p +1] = last[p] + last[p+1];
			}
			for(int j = 0; j < i; j++){
				System.out.print(curr[j]+ " ");
				
			}
			System.out.println("");
			last = curr;
		}
	}
	//Part d
	public static int iBinomialCoefficient(int n, int k){
		int[] last;
		int[] curr= new int[1];
		curr[0] = 1;
		last = curr;
		int result = 1;
		for(int i = 2; i <= n +1; i++){
			curr = new int[i];
			curr[0] = 1;
			curr[i-1] = 1;
			for(int p =0; p < i -2; p++){
				curr[p +1] = last[p] + last[p+1];
			}
			if(i == n +1 ){
				result = curr[k];
			}
			last = curr;
		}
		return result;
	}
	//Part e
	public static int fBinomialCoefficient(int n, int k){

		int result = 1;
		
		if(k == 0 || k == n){
			result = 1;
		}
		else if(k> n-k){
			result = (k+1);
			for(int i = result+1 ; i <= n ; i++){
				result = result * i;
			}
			
			result = result/rFactorial(n-k);
		}
		else{
			result =(n-k +1);
			for(int i = result+1; i <= n ; i++){
				result = result * i;
			}
			result = result/rFactorial(k);
		}
		return result;
	}
	public static int rFactorial(int n){
		int result = 0;
		if(n == 0||n == 1){
			result = 1;
		}
		else{
			result = n*rFactorial(n -1);
			
		}
		return result;
	}
}
::::::::::::::
P3.output
::::::::::::::
Because My Driver will calculate both the binomial coefficent and pascals triangle for any input, I seperated parts of the output
For Clarity I kept the complete outputs for (7,7) (6,3) and (0,0) to show how it is actually outputing what is being looked for.  The rest I trimmed and shuffled as i saw appropriate. 


Part A D, E, Results(The pascals triangles for n = 100 were removed for space)
Test (0,0)
Please enter n: 
0
Please enter k: 
0
Here is the Binomial Coefficient found recursively
The Binomial Coefficient is 1
Here is pascal's triangle for 0 rows
1
Here is the Binomial Coefficient found iteratively
The Binomial Coefficient is 1
Here is the Binomial Coefficient found through the reduced formula
The Binomial Coefficient is 1

Test(100,0)

This Program will calculate the Binomial Coefficent for any n and k
Please enter n: 
100
Please enter k: 
0
Here is the Binomial Coefficient found recursively
The Binomial Coefficient is 1
Here is the Binomial Coefficient found iteratively
The Binomial Coefficient is 1
Here is the Binomial Coefficient found through the reduced formula
The Binomial Coefficient is 1

Test(100,99)

This Program will calculate the Binomial Coefficent for any n and k
Please enter n: 
100
Please enter k: 
99
Here is the Binomial Coefficient found recursively
The Binomial Coefficient is 100
Here is the Binomial Coefficient found iteratively
The Binomial Coefficient is 100
Here is the Binomial Coefficient found through the reduced formula
The Binomial Coefficient is 100

Test(7,7)

This Program will calculate the Binomial Coefficent for any n and k
Please enter n: 
7
Please enter k: 
7
Here is the Binomial Coefficient found recursively
The Binomial Coefficient is 1
Here is pascal's triangle for 7 rows
1
1 1 
1 2 1 
1 3 3 1 
1 4 6 4 1 
1 5 10 10 5 1 
1 6 15 20 15 6 1 
1 7 21 35 35 21 7 1 
Here is the Binomial Coefficient found iteratively
The Binomial Coefficient is 1
Here is the Binomial Coefficient found through the reduced formula
The Binomial Coefficient is 1

Test(6,4)

This Program will calculate the Binomial Coefficent for any n and k
Please enter n: 
6
Please enter k: 
4
Here is the Binomial Coefficient found recursively
The Binomial Coefficient is 15
Here is pascal's triangle for 6 rows
1
1 1 
1 2 1 
1 3 3 1 
1 4 6 4 1 
1 5 10 10 5 1 
1 6 15 20 15 6 1 
Here is the Binomial Coefficient found iteratively
The Binomial Coefficient is 15
Here is the Binomial Coefficient found through the reduced formula
The Binomial Coefficient is 15

Test(6,3)

This Program will calculate the Binomial Coefficent for any n and k
Please enter n: 
6
Please enter k: 
3
Here is the Binomial Coefficient found recursively
The Binomial Coefficient is 20
Here is pascal's triangle for 6 rows
1
1 1 
1 2 1 
1 3 3 1 
1 4 6 4 1 
1 5 10 10 5 1 
1 6 15 20 15 6 1 
Here is the Binomial Coefficient found iteratively
The Binomial Coefficient is 20
Here is the Binomial Coefficient found through the reduced formula
The Binomial Coefficient is 20

Test(4,2)

This Program will calculate the Binomial Coefficent for any n and k
Please enter n: 
4
Please enter k: 
2
Here is the Binomial Coefficient found recursively
The Binomial Coefficient is 6
Here is pascal's triangle for 4 rows
1
1 1 
1 2 1 
1 3 3 1 
1 4 6 4 1 
Here is the Binomial Coefficient found iteratively
The Binomial Coefficient is 6
Here is the Binomial Coefficient found through the reduced formula
The Binomial Coefficient is 6

All Pascal Triangle tests

Test n = 1

This Program will calculate the Binomial Coefficent for any n and k
Please enter n: 
1
Please enter k: 
0
Here is pascal's triangle for 1 rows
1
1 1 

Test n = 2

This Program will calculate the Binomial Coefficent for any n and k
Please enter n: 
2
Please enter k: 
1
Here is the Binomial Coefficient found recursively
The Binomial Coefficient is 2
Here is pascal's triangle for 2 rows
1
1 1 
1 2 1 

Test n = 3

This Program will calculate the Binomial Coefficent for any n and k
Please enter n: 
3
Please enter k: 
2
Here is pascal's triangle for 3 rows
1
1 1 
1 2 1 
1 3 3 1 

Test n = 4

Here is pascal's triangle for 4 rows
1
1 1 
1 2 1 
1 3 3 1 
1 4 6 4 1 

Test n = 5
This Program will calculate the Binomial Coefficent for any n and k
Please enter n: 
5
Please enter k: 
3
Here is pascal's triangle for 5 rows
1
1 1 
1 2 1 
1 3 3 1 
1 4 6 4 1 
1 5 10 10 5 1 

Test n = 6

Here is pascal's triangle for 6 rows
1
1 1 
1 2 1 
1 3 3 1 
1 4 6 4 1 
1 5 10 10 5 1 
1 6 15 20 15 6 1 

Test n = 7

Here is pascal's triangle for 7 rows
1
1 1 
1 2 1 
1 3 3 1 
1 4 6 4 1 
1 5 10 10 5 1 
1 6 15 20 15 6 1 
1 7 21 35 35 21 7 1 

Test n = 8

This Program will calculate the Binomial Coefficent for any n and k
Please enter n: 
8
Please enter k: 
5
Here is the Binomial Coefficient found recursively
The Binomial Coefficient is 56
Here is pascal's triangle for 8 rows
1
1 1 
1 2 1 
1 3 3 1 
1 4 6 4 1 
1 5 10 10 5 1 
1 6 15 20 15 6 1 
1 7 21 35 35 21 7 1 
1 8 28 56 70 56 28 8 1 
