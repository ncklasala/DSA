::::::::::::::
ListArrayBased.java
::::::::::::::
public class ListArrayBased implements ListInterface
{

    private static final int MAX_LIST = 3;
    protected Object []items;  // an array of list items
    protected int numItems;  // number of items in list

    public ListArrayBased()
    {
        items = new Object[MAX_LIST];
        numItems = 0;
    }  // end default constructor

    public boolean isEmpty()
    {
        return (numItems == 0);
    } // end isEmpty

    public int size()
    {
        return numItems;
    }  // end size

    public void removeAll()
    {
        // Creates a new array; marks old array for
        // garbage collection.
        items = new Object[MAX_LIST];
        numItems = 0;
    } // end removeAll

    public void add(int index, Object item)
    throws  ListIndexOutOfBoundsException
    {
        if(items.length == numItems) //fix logic error
        {
            throw new ListException("ListException on add");
        }  // end if
        if (index >= 0 && index <= numItems)
        {
            // make room for new element by shifting all items at
            // positions >= index toward the end of the
            // list (no shift if index == numItems+1)
            for (int pos = numItems-1; pos >= index; pos--)  //textbook code modified to eliminate logic error causing ArrayIndexOutOfBoundsException
            {
                items[pos+1] = items[pos];

            } // end for
            // insert new item
            items[index] = item;
            numItems++;
        }
        else
        {
            // index out of range
            throw new ListIndexOutOfBoundsException(
                "ListIndexOutOfBoundsException on add");
        }  // end if
    } //end add

    public Object get(int index)
    throws ListIndexOutOfBoundsException
    {
        if (index >= 0 && index < numItems)
        {
            return items[index];
        }
        else
        {
            // index out of range
            throw new ListIndexOutOfBoundsException(
                "ListIndexOutOfBoundsException on get");
        }  // end if
    } // end get

    public void remove(int index)
    throws ListIndexOutOfBoundsException
    {
        if (index >= 0 && index < numItems)
        {
            // delete item by shifting all items at
            // positions > index toward the beginning of the list
            // (no shift if index == size)

            for (int pos = index+1; pos < numItems; pos++) //textbook code modified to eliminate logic error causing ArrayIndexOutOfBoundsException

            {
                items[pos-1] = items[pos];
            }  // end for
       
            numItems--;
            items[numItems] = null; // fix memory leak
        }
        else
        {
            // index out of range
            throw new ListIndexOutOfBoundsException(
                "ListIndexOutOfBoundsException on remove");
        }  // end if
    } //end remove
}::::::::::::::
ListArrayBasedPlus.java
::::::::::::::

public class ListArrayBasedPlus extends ListArrayBased{
	

	public ListArrayBasedPlus(){
		super();
        
	}
	

	@Override
	public void add(int index, Object item) throws IndexOutOfBoundsException{
		if(super.numItems == super.items.length){
			resize();
			
		}
		try{
		super.add(index, item);
		System.out.println("Items "+ item.toString()+ " added to postion "+ index);
		}catch(IndexOutOfBoundsException ex){
			System.out.println("Postion is out of range");
		}
	}

	public void resize(){
		int newLength = 0;
		if(super.numItems % 2 == 0){
			newLength = (int) ((int)(super.numItems + 1)*1.5);
		}
		else{
			newLength = (int) ((int)(super.numItems + 1.5)*1.5);
		}
		Object[] newArray = new Object[newLength];
		for(int k = 0; k < super.numItems;k++){
			newArray[k] = super.items[k];
		}
		super.items = newArray;
	}
	public void reverse(){
		int size = super.numItems;
		int index = size -1;
		Object[] revArray = new Object[size];
		for(int r = 0; r < super.numItems;r++){
			revArray[r] = super.items[index - r];
		}
		super.items = revArray;
	}

	@Override
	public String toString() {
		String string ="";
		for(int s = 0; s < numItems; s++){
			string = string + items[s] + " ";
		}
		return string;
	}
	

}
::::::::::::::
Driver.java
::::::::::::::
/*
 * Purpose: Lab 2
 * Status: incomplete
 * Last update: 9/17/17
 * Submitted:  
 * Comment: 
 * @author: Nicholas La Sala
 * @version: 2017.09.07
 */
import java.io.*;
public class Driver {
	static ListArrayBasedPlus list = new ListArrayBasedPlus();
	public static void main(String args[]) throws IOException{
		BufferedReader reader = new BufferedReader (new InputStreamReader (System.in));

		System.out.println("Menu");
		System.out.println("1. Insert item to list.");
		System.out.println("2. Remove item from list.");
		System.out.println("3. Get item from list.");
		System.out.println("4. Clear list.");
		System.out.println("5. Print size and content of list.");
		System.out.println("6. Reverse list.");
		System.out.println("7. Exit program.");
		System.out.println("Make your selection");
		int menuChoice = Integer.parseInt(reader.readLine());
		System.out.println(menuChoice);
		do{
			switch(menuChoice){
		
			case 1:
				System.out.println("You are adding an item to the list");
				System.out.println("Enter item: ");
				Object item = reader.readLine();
				System.out.println(item.toString());
				System.out.println("Enter position: ");
				int index = Integer.parseInt(reader.readLine());
				System.out.println(index);

				list.add(index,item);
				System.out.println("Make your new Menu Selection");
				menuChoice = Integer.parseInt(reader.readLine());
				System.out.println(menuChoice);
			break;
			case 2:
				if(list.size() == 0){
					System.out.println("The Array is already empty");
				}
				else{
					System.out.println("Enter position to remove item from : ");
					
					int removeIndex = Integer.parseInt(reader.readLine());
					System.out.println(removeIndex);
					try{
						System.out.println("Items "+ list.get(removeIndex)+ " removed from postion "+ removeIndex);
						list.remove(removeIndex);
					}catch(IndexOutOfBoundsException ex){
						System.out.println("Postion is out of range");
					}
					
				}
				System.out.println("Make your new Menu Selection");
				menuChoice = Integer.parseInt(reader.readLine());
				System.out.println(menuChoice);
			break;
			case 3:
				if(list.size() == 0){
					System.out.println("The Array is already empty");
				}			
				else{
					System.out.println("What is the postion of the item you would like to get");
					int getChoice = Integer.parseInt(reader.readLine());
					
					try{
						System.out.println("Item " +list.get(getChoice) + " retrieved from postion " + getChoice);
					}catch(IndexOutOfBoundsException ex){
						System.out.println("Postion is out of range");
					}
				}
				System.out.println("Make your new Menu Selection");
				menuChoice = Integer.parseInt(reader.readLine());
				System.out.println(menuChoice);
			break;
			case 4:
				if(list.size() == 0){
					System.out.println("The Array is already empty");
				}				
				else{
					list.removeAll();
					System.out.println("List is cleared");
				}
				System.out.println("Make your new Menu Selection");
				menuChoice = Integer.parseInt(reader.readLine());
				System.out.println(menuChoice);
			break;
			case 5:
				if(list.size() == 0){
					System.out.println("The Array is already empty");
				}			
				else{
					System.out.println("The List has a size of " + list.size() + " and the items: " + list.toString());
				}
				System.out.println("Make your new Menu Selection");
				menuChoice = Integer.parseInt(reader.readLine());
				System.out.println(menuChoice);
			break;
			case 6:
				if(list.size() == 0){
					System.out.println("The Array is already empty");
				}
				else{
					System.out.println("List Reversed!!!");
					list.reverse();
				}
				System.out.println("Make your new Menu Selection");
				menuChoice = Integer.parseInt(reader.readLine());
				System.out.println(menuChoice);
			break;
			case 7:
				System.out.println("Program ended, Good Bye!!!");
			break;
			}
		}while(menuChoice != 7);
	}
}


::::::::::::::
ListArrayListBased.java
::::::::::::::
import java.util.ArrayList;
//import java.io.*;
public class ListArrayListBased implements ListInterface{
	protected ArrayList<Object> items = new ArrayList<>();
	private int numItems;
	public ListArrayListBased(){
	  
	  items = new ArrayList<Object>();
  	}
	
  	public void add(int index, Object item){
	  	items.add(index, item);
	  	numItems++;

  	}
	
  	public void remove(int index){
  		items.remove(index);
  		numItems--;
  	}
	
  	public void removeAll(){
  		for(int i = 0; i < items.size();i++){
  			items.remove(i);
  		}
  		numItems = 0;
  	}

  	
	public boolean isEmpty() {
		return (numItems ==0);
	}
	
	public int size() {
	
		return numItems;
	}
	
	public Object get(int index) throws ListIndexOutOfBoundsException {
		return items.get(index);
	}
  
  
}
::::::::::::::
ListArrayListBasedPlus.java
::::::::::::::
import java.util.ArrayList;

public class ListArrayListBasedPlus extends ListArrayListBased{

	public ListArrayListBasedPlus(){
		super();
	}
  	public void reverse(){
  		ArrayList<Object> revItems = new ArrayList<>();
  		int index = super.items.size() - 1;
  		for(int j = 0; j < super.items.size();j++){
  			Object revItem = super.items.get(index - j);
  			revItems.add(revItem);
  		}
  		super.items = revItems;
  	}
  	//public void printList(){
	  //System.out.println("The List has a size of" + super.items.size() + "and has the items" + super.items.toString());
  	//}
	@Override
	public String toString() {
		return items.toString() ;
	}
  	
  	
}
::::::::::::::
Driver2.java
::::::::::::::
/*
 * Purpose: Lab 2
 * Status: incomplete
 * Last update: 9/17/17
 * Submitted:  
 * Comment: 
 * @author: Nicholas La Sala
 * @version: 2017.09.07
 */
import java.io.*;
public class Driver2 {
	static ListArrayListBasedPlus list = new ListArrayListBasedPlus();
	public static void main(String args[]) throws IOException{
		BufferedReader reader = new BufferedReader (new InputStreamReader (System.in));

		System.out.println("Menu");
		System.out.println("1. Insert item to list.");
		System.out.println("2. Remove item from list.");
		System.out.println("3. Get item from list.");
		System.out.println("4. Clear list.");
		System.out.println("5. Print size and content of list.");
		System.out.println("6. Reverse list.");
		System.out.println("7. Exit program.");
		System.out.println("Make your selection");
		int menuChoice = Integer.parseInt(reader.readLine());
		System.out.println(menuChoice);
		do{
			switch(menuChoice){
		
			case 1:
				System.out.println("You are adding an item to the list");
				System.out.println("Enter item: ");
				Object item = reader.readLine();
				System.out.println(item.toString());
				System.out.println("Enter position: ");
				int index = Integer.parseInt(reader.readLine());
				System.out.println(index);

				list.add(index,item);
				System.out.println("Make your new Menu Selection");
				menuChoice = Integer.parseInt(reader.readLine());
				System.out.println(menuChoice);
			break;
			case 2:
				if(list.size() == 0){
					System.out.println("The Array is already empty");
				}
				else{
					System.out.println("Enter position to remove item from : ");
					
					int removeIndex = Integer.parseInt(reader.readLine());
					System.out.println(removeIndex);
					try{
						System.out.println("Items "+ list.get(removeIndex)+ " removed from postion "+ removeIndex);
						list.remove(removeIndex);
					}catch(IndexOutOfBoundsException ex){
						System.out.println("Postion is out of range");
					}
					
				}
				System.out.println("Make your new Menu Selection");
				menuChoice = Integer.parseInt(reader.readLine());
				System.out.println(menuChoice);
			break;
			case 3:
				if(list.size() == 0){
					System.out.println("The Array is already empty");
				}			
				else{
					System.out.println("What is the postion of the item you would like to get");
					int getChoice = Integer.parseInt(reader.readLine());
					
					try{
						System.out.println("Item " +list.get(getChoice) + " retrieved from postion " + getChoice);
					}catch(IndexOutOfBoundsException ex){
						System.out.println("Postion is out of range");
					}
				}
				System.out.println("Make your new Menu Selection");
				menuChoice = Integer.parseInt(reader.readLine());
				System.out.println(menuChoice);
			break;
			case 4:
				if(list.size() == 0){
					System.out.println("The Array is already empty");
				}				
				else{
					list.removeAll();
					System.out.println("List is cleared");
				}
				System.out.println("Make your new Menu Selection");
				menuChoice = Integer.parseInt(reader.readLine());
				System.out.println(menuChoice);
			break;
			case 5:
				if(list.size() == 0){
					System.out.println("The Array is already empty");
				}			
				else{
					System.out.println("The List has a size of " + list.size() + " and the items: " + list.toString());
				}
				System.out.println("Make your new Menu Selection");
				menuChoice = Integer.parseInt(reader.readLine());
				System.out.println(menuChoice);
			break;
			case 6:
				if(list.size() == 0){
					System.out.println("The Array is already empty");
				}
				else{
					System.out.println("List Reversed!!!");
					list.reverse();
				}
				System.out.println("Make your new Menu Selection");
				menuChoice = Integer.parseInt(reader.readLine());
				System.out.println(menuChoice);
			break;
			case 7:
				System.out.println("Program ended, Good Bye!!!");
			break;
			}
		}while(menuChoice != 7);
	}
}

::::::::::::::
l3.output
::::::::::::::
Menu
1. Insert item to list.
2. Remove item from list.
3. Get item from list.
4. Clear list.
5. Print size and content of list.
6. Reverse list.
7. Exit program.
Make your selection
5
The Array is already empty
Make your new Menu Selection
1
You are adding an item to the list
Enter item: 
Data
Enter position: 
0
Items Data added to postion 0
Make your new Menu Selection
5
The List has a size of 1 and the items: [Data, null, null]
Make your new Menu Selection
1
You are adding an item to the list
Enter item: 
Beverly
Enter position: 
0
Items Beverly added to postion 0
Make your new Menu Selection
5
The List has a size of 2 and the items: [Beverly, Data, null]
Make your new Menu Selection
1
You are adding an item to the list
Enter item: 
Jean-Luc
Enter position: 
4
Postion is out of range
Make your new Menu Selection
5
The List has a size of 2 and the items: [Beverly, Data, null]
Make your new Menu Selection
1
You are adding an item to the list
Enter item: 
Jean-Luc
Enter position: 
2
Items Jean-Luc added to postion 2
Make your new Menu Selection
1
You are adding an item to the list
Enter item: 
Geordi
Enter position: 
1
Items Geordi added to postion 1
Make your new Menu Selection
1
You are adding an item to the list
Enter item: 
Worf
Enter position: 
3
Items Worf added to postion 3
Make your new Menu Selection
5
The List has a size of 5 and the items: [Beverly, Geordi, Data, Worf, Jean-Luc, null]
Make your new Menu Selection
6
List Reversed!!!
Make your new Menu Selection
5
The List has a size of 5 and the items: [Jean-Luc, Worf, Data, Geordi, Beverly]
Make your new Menu Selection
2
Enter position to remove item from : 
5
Postion is out of range
Make your new Menu Selection
2
Enter position to remove item from : 
3
Items Geordi removed from postion 3
Make your new Menu Selection
5
The List has a size of 4 and the items: [Jean-Luc, Worf, Data, Beverly, Beverly]
Make your new Menu Selection
2
Enter position to remove item from : 
0
Items Jean-Luc removed from postion 0
Make your new Menu Selection
1
You are adding an item to the list
Enter item: 
Will
Enter position: 
1
Items Will added to postion 1
Make your new Menu Selection
5
The List has a size of 4 and the items: [Worf, Will, Data, Beverly, Beverly]
Make your new Menu Selection
3
What is the postion of the item you would like to get
Item Data retrieved from postion 2
Make your new Menu Selection
3
What is the postion of the item you would like to get
Item Worf retrieved from postion 0
Make your new Menu Selection
3
What is the postion of the item you would like to get
Postion is out of range
Make your new Menu Selection
5
The List has a size of 4 and the items: [Worf, Will, Data, Beverly, Beverly]
Make your new Menu Selection
6
List Reversed!!!
Make your new Menu Selection
5
The List has a size of 4 and the items: [Beverly, Data, Will, Worf]
Make your new Menu Selection
4
List is cleared
Make your new Menu Selection
5
The Array is already empty
Make your new Menu Selection
7
::::::::::::::
Part3.input
::::::::::::::
//This is the source code for the ArrayList methods I used in my implementation of the List.

//I used this toString method to complete part the print size and contents of the List
//This approach to making a toString method is similar to my approach in ListBasedArraysPlus
430    public String More ...toString() {
431        Iterator<E> i = iterator();
432        if (! i.hasNext())
433            return "[]";
434
435        StringBuilder sb = new StringBuilder();
436        sb.append('[');
437        for (;;) {
438            E e = i.next();
439            sb.append(e == this ? "(this Collection)" : e);
440            if (! i.hasNext())
441                return sb.append(']').toString();
442            sb.append(", ");
443        }
444    }

//I used this remove method in my remove functionally
411     public E More ...remove(int index) {
412         rangeCheck(index);
413 
414         modCount++;
415         E oldValue = elementData(index);
416 
417         int numMoved = size - index - 1;
418         if (numMoved > 0)
419             System.arraycopy(elementData, index+1, elementData, index,
420                              numMoved);
421         elementData[--size] = null; // Let gc do its work
422 
423         return oldValue;
424     }
//I used this add method in my add function
392     public void More ...add(int index, E element) {
393         rangeCheckForAdd(index);
394 
395         ensureCapacity(size+1);  // Increments modCount!!
396         System.arraycopy(elementData, index, elementData, index + 1,
397                          size - index);
398         elementData[index] = element;
399         size++;
400     }::::::::::::::
ListArrayBased.java
::::::::::::::
public class ListArrayBased implements ListInterface
{

    private static final int MAX_LIST = 3;
    protected Object []items;  // an array of list items
    protected int numItems;  // number of items in list

    public ListArrayBased()
    {
        items = new Object[MAX_LIST];
        numItems = 0;
    }  // end default constructor

    public boolean isEmpty()
    {
        return (numItems == 0);
    } // end isEmpty

    public int size()
    {
        return numItems;
    }  // end size

    public void removeAll()
    {
        // Creates a new array; marks old array for
        // garbage collection.
        items = new Object[MAX_LIST];
        numItems = 0;
    } // end removeAll

    public void add(int index, Object item)
    throws  ListIndexOutOfBoundsException
    {
        if(items.length == numItems) //fix logic error
        {
            throw new ListException("ListException on add");
        }  // end if
        if (index >= 0 && index <= numItems)
        {
            // make room for new element by shifting all items at
            // positions >= index toward the end of the
            // list (no shift if index == numItems+1)
            for (int pos = numItems-1; pos >= index; pos--)  //textbook code modified to eliminate logic error causing ArrayIndexOutOfBoundsException
            {
                items[pos+1] = items[pos];

            } // end for
            // insert new item
            items[index] = item;
            numItems++;
        }
        else
        {
            // index out of range
            throw new ListIndexOutOfBoundsException(
                "ListIndexOutOfBoundsException on add");
        }  // end if
    } //end add

    public Object get(int index)
    throws ListIndexOutOfBoundsException
    {
        if (index >= 0 && index < numItems)
        {
            return items[index];
        }
        else
        {
            // index out of range
            throw new ListIndexOutOfBoundsException(
                "ListIndexOutOfBoundsException on get");
        }  // end if
    } // end get

    public void remove(int index)
    throws ListIndexOutOfBoundsException
    {
        if (index >= 0 && index < numItems)
        {
            // delete item by shifting all items at
            // positions > index toward the beginning of the list
            // (no shift if index == size)

            for (int pos = index+1; pos < numItems; pos++) //textbook code modified to eliminate logic error causing ArrayIndexOutOfBoundsException

            {
                items[pos-1] = items[pos];
            }  // end for
       
            numItems--;
            items[numItems] = null; // fix memory leak
        }
        else
        {
            // index out of range
            throw new ListIndexOutOfBoundsException(
                "ListIndexOutOfBoundsException on remove");
        }  // end if
    } //end remove
}::::::::::::::
ListArrayBasedPlus.java
::::::::::::::

public class ListArrayBasedPlus extends ListArrayBased{
	

	public ListArrayBasedPlus(){
		super();
        
	}
	

	@Override
	public void add(int index, Object item) throws IndexOutOfBoundsException{
		if(super.numItems == super.items.length){
			resize();
			
		}
		try{
		super.add(index, item);
		System.out.println("Items "+ item.toString()+ " added to postion "+ index);
		}catch(IndexOutOfBoundsException ex){
			System.out.println("Postion is out of range");
		}
	}

	public void resize(){
		int newLength = 0;
		if(super.numItems % 2 == 0){
			newLength = (int) ((int)(super.numItems + 1)*1.5);
		}
		else{
			newLength = (int) ((int)(super.numItems + 1.5)*1.5);
		}
		Object[] newArray = new Object[newLength];
		for(int k = 0; k < super.numItems;k++){
			newArray[k] = super.items[k];
		}
		super.items = newArray;
	}
	public void reverse(){
		int size = super.numItems;
		int index = size -1;
		Object[] revArray = new Object[size];
		for(int r = 0; r < super.numItems;r++){
			revArray[r] = super.items[index - r];
		}
		super.items = revArray;
	}

	@Override
	public String toString() {
		String string ="";
		for(int s = 0; s < numItems; s++){
			string = string + items[s] + " ";
		}
		return string;
	}
	

}
::::::::::::::
Driver.java
::::::::::::::
/*
 * Purpose: Lab 2
 * Status: incomplete
 * Last update: 9/17/17
 * Submitted:  
 * Comment: 
 * @author: Nicholas La Sala
 * @version: 2017.09.07
 */
import java.io.*;
public class Driver {
	static ListArrayBasedPlus list = new ListArrayBasedPlus();
	public static void main(String args[]) throws IOException{
		BufferedReader reader = new BufferedReader (new InputStreamReader (System.in));

		System.out.println("Menu");
		System.out.println("1. Insert item to list.");
		System.out.println("2. Remove item from list.");
		System.out.println("3. Get item from list.");
		System.out.println("4. Clear list.");
		System.out.println("5. Print size and content of list.");
		System.out.println("6. Reverse list.");
		System.out.println("7. Exit program.");
		System.out.println("Make your selection");
		int menuChoice = Integer.parseInt(reader.readLine());
		System.out.println(menuChoice);
		do{
			switch(menuChoice){
		
			case 1:
				System.out.println("You are adding an item to the list");
				System.out.println("Enter item: ");
				Object item = reader.readLine();
				System.out.println(item.toString());
				System.out.println("Enter position: ");
				int index = Integer.parseInt(reader.readLine());
				System.out.println(index);

				list.add(index,item);
				System.out.println("Make your new Menu Selection");
				menuChoice = Integer.parseInt(reader.readLine());
				System.out.println(menuChoice);
			break;
			case 2:
				if(list.size() == 0){
					System.out.println("The Array is already empty");
				}
				else{
					System.out.println("Enter position to remove item from : ");
					
					int removeIndex = Integer.parseInt(reader.readLine());
					System.out.println(removeIndex);
					try{
						System.out.println("Items "+ list.get(removeIndex)+ " removed from postion "+ removeIndex);
						list.remove(removeIndex);
					}catch(IndexOutOfBoundsException ex){
						System.out.println("Postion is out of range");
					}
					
				}
				System.out.println("Make your new Menu Selection");
				menuChoice = Integer.parseInt(reader.readLine());
				System.out.println(menuChoice);
			break;
			case 3:
				if(list.size() == 0){
					System.out.println("The Array is already empty");
				}			
				else{
					System.out.println("What is the postion of the item you would like to get");
					int getChoice = Integer.parseInt(reader.readLine());
					
					try{
						System.out.println("Item " +list.get(getChoice) + " retrieved from postion " + getChoice);
					}catch(IndexOutOfBoundsException ex){
						System.out.println("Postion is out of range");
					}
				}
				System.out.println("Make your new Menu Selection");
				menuChoice = Integer.parseInt(reader.readLine());
				System.out.println(menuChoice);
			break;
			case 4:
				if(list.size() == 0){
					System.out.println("The Array is already empty");
				}				
				else{
					list.removeAll();
					System.out.println("List is cleared");
				}
				System.out.println("Make your new Menu Selection");
				menuChoice = Integer.parseInt(reader.readLine());
				System.out.println(menuChoice);
			break;
			case 5:
				if(list.size() == 0){
					System.out.println("The Array is already empty");
				}			
				else{
					System.out.println("The List has a size of " + list.size() + " and the items: " + list.toString());
				}
				System.out.println("Make your new Menu Selection");
				menuChoice = Integer.parseInt(reader.readLine());
				System.out.println(menuChoice);
			break;
			case 6:
				if(list.size() == 0){
					System.out.println("The Array is already empty");
				}
				else{
					System.out.println("List Reversed!!!");
					list.reverse();
				}
				System.out.println("Make your new Menu Selection");
				menuChoice = Integer.parseInt(reader.readLine());
				System.out.println(menuChoice);
			break;
			case 7:
				System.out.println("Program ended, Good Bye!!!");
			break;
			}
		}while(menuChoice != 7);
	}
}


::::::::::::::
ListArrayListBased.java
::::::::::::::
import java.util.ArrayList;
//import java.io.*;
public class ListArrayListBased implements ListInterface{
	protected ArrayList<Object> items = new ArrayList<>();
	private int numItems;
	public ListArrayListBased(){
	  
	  items = new ArrayList<Object>();
  	}
	
  	public void add(int index, Object item){
	  	items.add(index, item);
	  	numItems++;

  	}
	
  	public void remove(int index){
  		items.remove(index);
  		numItems--;
  	}
	
  	public void removeAll(){
  		for(int i = 0; i < items.size();i++){
  			items.remove(i);
  		}
  		numItems = 0;
  	}

  	
	public boolean isEmpty() {
		return (numItems ==0);
	}
	
	public int size() {
	
		return numItems;
	}
	
	public Object get(int index) throws ListIndexOutOfBoundsException {
		return items.get(index);
	}
  
  
}
::::::::::::::
ListArrayListBasedPlus.java
::::::::::::::
import java.util.ArrayList;

public class ListArrayListBasedPlus extends ListArrayListBased{

	public ListArrayListBasedPlus(){
		super();
	}
  	public void reverse(){
  		ArrayList<Object> revItems = new ArrayList<>();
  		int index = super.items.size() - 1;
  		for(int j = 0; j < super.items.size();j++){
  			Object revItem = super.items.get(index - j);
  			revItems.add(revItem);
  		}
  		super.items = revItems;
  	}
  	//public void printList(){
	  //System.out.println("The List has a size of" + super.items.size() + "and has the items" + super.items.toString());
  	//}
	@Override
	public String toString() {
		return items.toString() ;
	}
  	
  	
}
::::::::::::::
Driver2.java
::::::::::::::
/*
 * Purpose: Lab 2
 * Status: incomplete
 * Last update: 9/17/17
 * Submitted:  
 * Comment: 
 * @author: Nicholas La Sala
 * @version: 2017.09.07
 */
import java.io.*;
public class Driver2 {
	static ListArrayListBasedPlus list = new ListArrayListBasedPlus();
	public static void main(String args[]) throws IOException{
		BufferedReader reader = new BufferedReader (new InputStreamReader (System.in));

		System.out.println("Menu");
		System.out.println("1. Insert item to list.");
		System.out.println("2. Remove item from list.");
		System.out.println("3. Get item from list.");
		System.out.println("4. Clear list.");
		System.out.println("5. Print size and content of list.");
		System.out.println("6. Reverse list.");
		System.out.println("7. Exit program.");
		System.out.println("Make your selection");
		int menuChoice = Integer.parseInt(reader.readLine());
		System.out.println(menuChoice);
		do{
			switch(menuChoice){
		
			case 1:
				System.out.println("You are adding an item to the list");
				System.out.println("Enter item: ");
				Object item = reader.readLine();
				System.out.println(item.toString());
				System.out.println("Enter position: ");
				int index = Integer.parseInt(reader.readLine());
				System.out.println(index);

				list.add(index,item);
				System.out.println("Make your new Menu Selection");
				menuChoice = Integer.parseInt(reader.readLine());
				System.out.println(menuChoice);
			break;
			case 2:
				if(list.size() == 0){
					System.out.println("The Array is already empty");
				}
				else{
					System.out.println("Enter position to remove item from : ");
					
					int removeIndex = Integer.parseInt(reader.readLine());
					System.out.println(removeIndex);
					try{
						System.out.println("Items "+ list.get(removeIndex)+ " removed from postion "+ removeIndex);
						list.remove(removeIndex);
					}catch(IndexOutOfBoundsException ex){
						System.out.println("Postion is out of range");
					}
					
				}
				System.out.println("Make your new Menu Selection");
				menuChoice = Integer.parseInt(reader.readLine());
				System.out.println(menuChoice);
			break;
			case 3:
				if(list.size() == 0){
					System.out.println("The Array is already empty");
				}			
				else{
					System.out.println("What is the postion of the item you would like to get");
					int getChoice = Integer.parseInt(reader.readLine());
					
					try{
						System.out.println("Item " +list.get(getChoice) + " retrieved from postion " + getChoice);
					}catch(IndexOutOfBoundsException ex){
						System.out.println("Postion is out of range");
					}
				}
				System.out.println("Make your new Menu Selection");
				menuChoice = Integer.parseInt(reader.readLine());
				System.out.println(menuChoice);
			break;
			case 4:
				if(list.size() == 0){
					System.out.println("The Array is already empty");
				}				
				else{
					list.removeAll();
					System.out.println("List is cleared");
				}
				System.out.println("Make your new Menu Selection");
				menuChoice = Integer.parseInt(reader.readLine());
				System.out.println(menuChoice);
			break;
			case 5:
				if(list.size() == 0){
					System.out.println("The Array is already empty");
				}			
				else{
					System.out.println("The List has a size of " + list.size() + " and the items: " + list.toString());
				}
				System.out.println("Make your new Menu Selection");
				menuChoice = Integer.parseInt(reader.readLine());
				System.out.println(menuChoice);
			break;
			case 6:
				if(list.size() == 0){
					System.out.println("The Array is already empty");
				}
				else{
					System.out.println("List Reversed!!!");
					list.reverse();
				}
				System.out.println("Make your new Menu Selection");
				menuChoice = Integer.parseInt(reader.readLine());
				System.out.println(menuChoice);
			break;
			case 7:
				System.out.println("Program ended, Good Bye!!!");
			break;
			}
		}while(menuChoice != 7);
	}
}

::::::::::::::
l3.output
::::::::::::::
Menu
1. Insert item to list.
2. Remove item from list.
3. Get item from list.
4. Clear list.
5. Print size and content of list.
6. Reverse list.
7. Exit program.
Make your selection
5
The Array is already empty
Make your new Menu Selection
1
You are adding an item to the list
Enter item: 
Data
Enter position: 
0
Items Data added to postion 0
Make your new Menu Selection
5
The List has a size of 1 and the items: [Data, null, null]
Make your new Menu Selection
1
You are adding an item to the list
Enter item: 
Beverly
Enter position: 
0
Items Beverly added to postion 0
Make your new Menu Selection
5
The List has a size of 2 and the items: [Beverly, Data, null]
Make your new Menu Selection
1
You are adding an item to the list
Enter item: 
Jean-Luc
Enter position: 
4
Postion is out of range
Make your new Menu Selection
5
The List has a size of 2 and the items: [Beverly, Data, null]
Make your new Menu Selection
1
You are adding an item to the list
Enter item: 
Jean-Luc
Enter position: 
2
Items Jean-Luc added to postion 2
Make your new Menu Selection
1
You are adding an item to the list
Enter item: 
Geordi
Enter position: 
1
Items Geordi added to postion 1
Make your new Menu Selection
1
You are adding an item to the list
Enter item: 
Worf
Enter position: 
3
Items Worf added to postion 3
Make your new Menu Selection
5
The List has a size of 5 and the items: [Beverly, Geordi, Data, Worf, Jean-Luc, null]
Make your new Menu Selection
6
List Reversed!!!
Make your new Menu Selection
5
The List has a size of 5 and the items: [Jean-Luc, Worf, Data, Geordi, Beverly]
Make your new Menu Selection
2
Enter position to remove item from : 
5
Postion is out of range
Make your new Menu Selection
2
Enter position to remove item from : 
3
Items Geordi removed from postion 3
Make your new Menu Selection
5
The List has a size of 4 and the items: [Jean-Luc, Worf, Data, Beverly, Beverly]
Make your new Menu Selection
2
Enter position to remove item from : 
0
Items Jean-Luc removed from postion 0
Make your new Menu Selection
1
You are adding an item to the list
Enter item: 
Will
Enter position: 
1
Items Will added to postion 1
Make your new Menu Selection
5
The List has a size of 4 and the items: [Worf, Will, Data, Beverly, Beverly]
Make your new Menu Selection
3
What is the postion of the item you would like to get
Item Data retrieved from postion 2
Make your new Menu Selection
3
What is the postion of the item you would like to get
Item Worf retrieved from postion 0
Make your new Menu Selection
3
What is the postion of the item you would like to get
Postion is out of range
Make your new Menu Selection
5
The List has a size of 4 and the items: [Worf, Will, Data, Beverly, Beverly]
Make your new Menu Selection
6
List Reversed!!!
Make your new Menu Selection
5
The List has a size of 4 and the items: [Beverly, Data, Will, Worf]
Make your new Menu Selection
4
List is cleared
Make your new Menu Selection
5
The Array is already empty
Make your new Menu Selection
7
::::::::::::::
l2p2.output
::::::::::::::
Menu
1. Insert item to list.
2. Remove item from list.
3. Get item from list.
4. Clear list.
5. Print size and content of list.
6. Reverse list.
7. Exit program.
Make your selection
5
The Array is already empty
Make your new Menu Selection
1
You are adding an item to the list
Enter item: 
Data
Enter position: 
0
Items Data added to postion 0
Make your new Menu Selection
5
The List has a size of 1 and the items: [Data, null, null]
Make your new Menu Selection
1
You are adding an item to the list
Enter item: 
Beverly
Enter position: 
0
Items Beverly added to postion 0
Make your new Menu Selection
5
The List has a size of 2 and the items: [Beverly, Data, null]
Make your new Menu Selection
1
You are adding an item to the list
Enter item: 
Jean-Luc
Enter position: 
4
Postion is out of range
Make your new Menu Selection
5
The List has a size of 2 and the items: [Beverly, Data, null]
Make your new Menu Selection
1
You are adding an item to the list
Enter item: 
Jean-Luc
Enter position: 
2
Items Jean-Luc added to postion 2
Make your new Menu Selection
1
You are adding an item to the list
Enter item: 
Geordi
Enter position: 
1
Items Geordi added to postion 1
Make your new Menu Selection
1
You are adding an item to the list
Enter item: 
Worf
Enter position: 
3
Items Worf added to postion 3
Make your new Menu Selection
5
The List has a size of 5 and the items: [Beverly, Geordi, Data, Worf, Jean-Luc, null]
Make your new Menu Selection
6
List Reversed!!!
Make your new Menu Selection
5
The List has a size of 5 and the items: [Jean-Luc, Worf, Data, Geordi, Beverly]
Make your new Menu Selection
2
Enter position to remove item from : 
5
Postion is out of range
Make your new Menu Selection
2
Enter position to remove item from : 
3
Items Geordi removed from postion 3
Make your new Menu Selection
5
The List has a size of 4 and the items: [Jean-Luc, Worf, Data, Beverly, Beverly]
Make your new Menu Selection
2
Enter position to remove item from : 
0
Items Jean-Luc removed from postion 0
Make your new Menu Selection
1
You are adding an item to the list
Enter item: 
Will
Enter position: 
1
Items Will added to postion 1
Make your new Menu Selection
5
The List has a size of 4 and the items: [Worf, Will, Data, Beverly, Beverly]
Make your new Menu Selection
3
What is the postion of the item you would like to get
Item Data retrieved from postion 2
Make your new Menu Selection
3
What is the postion of the item you would like to get
Item Worf retrieved from postion 0
Make your new Menu Selection
3
What is the postion of the item you would like to get
Postion is out of range
Make your new Menu Selection
5
The List has a size of 4 and the items: [Worf, Will, Data, Beverly, Beverly]
Make your new Menu Selection
6
List Reversed!!!
Make your new Menu Selection
5
The List has a size of 4 and the items: [Beverly, Data, Will, Worf]
Make your new Menu Selection
4
List is cleared
Make your new Menu Selection
5
The Array is already empty
Make your new Menu Selection
7
::::::::::::::
Part3.input
::::::::::::::
//This is the source code for the ArrayList methods I used in my implementation of the List.

//I used this toString method to complete part the print size and contents of the List
//This approach to making a toString method is similar to my approach in ListBasedArraysPlus
430    public String More ...toString() {
431        Iterator<E> i = iterator();
432        if (! i.hasNext())
433            return "[]";
434
435        StringBuilder sb = new StringBuilder();
436        sb.append('[');
437        for (;;) {
438            E e = i.next();
439            sb.append(e == this ? "(this Collection)" : e);
440            if (! i.hasNext())
441                return sb.append(']').toString();
442            sb.append(", ");
443        }
444    }

//I used this remove method in my remove functionally
411     public E More ...remove(int index) {
412         rangeCheck(index);
413 
414         modCount++;
415         E oldValue = elementData(index);
416 
417         int numMoved = size - index - 1;
418         if (numMoved > 0)
419             System.arraycopy(elementData, index+1, elementData, index,
420                              numMoved);
421         elementData[--size] = null; // Let gc do its work
422 
423         return oldValue;
424     }
//I used this add method in my add function
392     public void More ...add(int index, E element) {
393         rangeCheckForAdd(index);
394 
395         ensureCapacity(size+1);  // Increments modCount!!
396         System.arraycopy(elementData, index, elementData, index + 1,
397                          size - index);
398         elementData[index] = element;
399         size++;
400     }